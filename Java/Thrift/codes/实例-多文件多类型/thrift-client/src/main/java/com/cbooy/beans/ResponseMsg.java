/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cbooy.beans;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-28")
public class ResponseMsg implements org.apache.thrift.TBase<ResponseMsg, ResponseMsg._Fields>, java.io.Serializable, Cloneable, Comparable<ResponseMsg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResponseMsg");

  private static final org.apache.thrift.protocol.TField ERROR_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("errorNO", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMsg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("extVal", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseMsgTupleSchemeFactory());
  }

  public String errorNO; // required
  public String errorMsg; // required
  public Map<String,String> extVal; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERROR_NO((short)1, "errorNO"),
    ERROR_MSG((short)2, "errorMsg"),
    EXT_VAL((short)3, "extVal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERROR_NO
          return ERROR_NO;
        case 2: // ERROR_MSG
          return ERROR_MSG;
        case 3: // EXT_VAL
          return EXT_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.EXT_VAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERROR_NO, new org.apache.thrift.meta_data.FieldMetaData("errorNO", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errorMsg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT_VAL, new org.apache.thrift.meta_data.FieldMetaData("extVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResponseMsg.class, metaDataMap);
  }

  public ResponseMsg() {
  }

  public ResponseMsg(
    String errorNO,
    String errorMsg)
  {
    this();
    this.errorNO = errorNO;
    this.errorMsg = errorMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResponseMsg(ResponseMsg other) {
    if (other.isSetErrorNO()) {
      this.errorNO = other.errorNO;
    }
    if (other.isSetErrorMsg()) {
      this.errorMsg = other.errorMsg;
    }
    if (other.isSetExtVal()) {
      Map<String,String> __this__extVal = new HashMap<String,String>(other.extVal);
      this.extVal = __this__extVal;
    }
  }

  public ResponseMsg deepCopy() {
    return new ResponseMsg(this);
  }

  public void clear() {
    this.errorNO = null;
    this.errorMsg = null;
    this.extVal = null;
  }

  public String getErrorNO() {
    return this.errorNO;
  }

  public ResponseMsg setErrorNO(String errorNO) {
    this.errorNO = errorNO;
    return this;
  }

  public void unsetErrorNO() {
    this.errorNO = null;
  }

  /** Returns true if field errorNO is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorNO() {
    return this.errorNO != null;
  }

  public void setErrorNOIsSet(boolean value) {
    if (!value) {
      this.errorNO = null;
    }
  }

  public String getErrorMsg() {
    return this.errorMsg;
  }

  public ResponseMsg setErrorMsg(String errorMsg) {
    this.errorMsg = errorMsg;
    return this;
  }

  public void unsetErrorMsg() {
    this.errorMsg = null;
  }

  /** Returns true if field errorMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMsg() {
    return this.errorMsg != null;
  }

  public void setErrorMsgIsSet(boolean value) {
    if (!value) {
      this.errorMsg = null;
    }
  }

  public int getExtValSize() {
    return (this.extVal == null) ? 0 : this.extVal.size();
  }

  public void putToExtVal(String key, String val) {
    if (this.extVal == null) {
      this.extVal = new HashMap<String,String>();
    }
    this.extVal.put(key, val);
  }

  public Map<String,String> getExtVal() {
    return this.extVal;
  }

  public ResponseMsg setExtVal(Map<String,String> extVal) {
    this.extVal = extVal;
    return this;
  }

  public void unsetExtVal() {
    this.extVal = null;
  }

  /** Returns true if field extVal is set (has been assigned a value) and false otherwise */
  public boolean isSetExtVal() {
    return this.extVal != null;
  }

  public void setExtValIsSet(boolean value) {
    if (!value) {
      this.extVal = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERROR_NO:
      if (value == null) {
        unsetErrorNO();
      } else {
        setErrorNO((String)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetErrorMsg();
      } else {
        setErrorMsg((String)value);
      }
      break;

    case EXT_VAL:
      if (value == null) {
        unsetExtVal();
      } else {
        setExtVal((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERROR_NO:
      return getErrorNO();

    case ERROR_MSG:
      return getErrorMsg();

    case EXT_VAL:
      return getExtVal();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERROR_NO:
      return isSetErrorNO();
    case ERROR_MSG:
      return isSetErrorMsg();
    case EXT_VAL:
      return isSetExtVal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResponseMsg)
      return this.equals((ResponseMsg)that);
    return false;
  }

  public boolean equals(ResponseMsg that) {
    if (that == null)
      return false;

    boolean this_present_errorNO = true && this.isSetErrorNO();
    boolean that_present_errorNO = true && that.isSetErrorNO();
    if (this_present_errorNO || that_present_errorNO) {
      if (!(this_present_errorNO && that_present_errorNO))
        return false;
      if (!this.errorNO.equals(that.errorNO))
        return false;
    }

    boolean this_present_errorMsg = true && this.isSetErrorMsg();
    boolean that_present_errorMsg = true && that.isSetErrorMsg();
    if (this_present_errorMsg || that_present_errorMsg) {
      if (!(this_present_errorMsg && that_present_errorMsg))
        return false;
      if (!this.errorMsg.equals(that.errorMsg))
        return false;
    }

    boolean this_present_extVal = true && this.isSetExtVal();
    boolean that_present_extVal = true && that.isSetExtVal();
    if (this_present_extVal || that_present_extVal) {
      if (!(this_present_extVal && that_present_extVal))
        return false;
      if (!this.extVal.equals(that.extVal))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_errorNO = true && (isSetErrorNO());
    list.add(present_errorNO);
    if (present_errorNO)
      list.add(errorNO);

    boolean present_errorMsg = true && (isSetErrorMsg());
    list.add(present_errorMsg);
    if (present_errorMsg)
      list.add(errorMsg);

    boolean present_extVal = true && (isSetExtVal());
    list.add(present_extVal);
    if (present_extVal)
      list.add(extVal);

    return list.hashCode();
  }

  public int compareTo(ResponseMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetErrorNO()).compareTo(other.isSetErrorNO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorNO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorNO, other.errorNO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorMsg()).compareTo(other.isSetErrorMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMsg, other.errorMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtVal()).compareTo(other.isSetExtVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extVal, other.extVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResponseMsg(");
    boolean first = true;

    sb.append("errorNO:");
    if (this.errorNO == null) {
      sb.append("null");
    } else {
      sb.append(this.errorNO);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorMsg:");
    if (this.errorMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMsg);
    }
    first = false;
    if (isSetExtVal()) {
      if (!first) sb.append(", ");
      sb.append("extVal:");
      if (this.extVal == null) {
        sb.append("null");
      } else {
        sb.append(this.extVal);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (errorNO == null) {
      throw new TProtocolException("Required field 'errorNO' was not present! Struct: " + toString());
    }
    if (errorMsg == null) {
      throw new TProtocolException("Required field 'errorMsg' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseMsgStandardSchemeFactory implements SchemeFactory {
    public ResponseMsgStandardScheme getScheme() {
      return new ResponseMsgStandardScheme();
    }
  }

  private static class ResponseMsgStandardScheme extends StandardScheme<ResponseMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResponseMsg struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERROR_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorNO = iprot.readString();
              struct.setErrorNOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMsg = iprot.readString();
              struct.setErrorMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.extVal = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.extVal.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setExtValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResponseMsg struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.errorNO != null) {
        oprot.writeFieldBegin(ERROR_NO_FIELD_DESC);
        oprot.writeString(struct.errorNO);
        oprot.writeFieldEnd();
      }
      if (struct.errorMsg != null) {
        oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
        oprot.writeString(struct.errorMsg);
        oprot.writeFieldEnd();
      }
      if (struct.extVal != null) {
        if (struct.isSetExtVal()) {
          oprot.writeFieldBegin(EXT_VAL_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extVal.size()));
            for (Map.Entry<String, String> _iter4 : struct.extVal.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseMsgTupleSchemeFactory implements SchemeFactory {
    public ResponseMsgTupleScheme getScheme() {
      return new ResponseMsgTupleScheme();
    }
  }

  private static class ResponseMsgTupleScheme extends TupleScheme<ResponseMsg> {

    public void write(org.apache.thrift.protocol.TProtocol prot, ResponseMsg struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.errorNO);
      oprot.writeString(struct.errorMsg);
      BitSet optionals = new BitSet();
      if (struct.isSetExtVal()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetExtVal()) {
        {
          oprot.writeI32(struct.extVal.size());
          for (Map.Entry<String, String> _iter5 : struct.extVal.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, ResponseMsg struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.errorNO = iprot.readString();
      struct.setErrorNOIsSet(true);
      struct.errorMsg = iprot.readString();
      struct.setErrorMsgIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extVal = new HashMap<String,String>(2*_map6.size);
          String _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.extVal.put(_key7, _val8);
          }
        }
        struct.setExtValIsSet(true);
      }
    }
  }

}

