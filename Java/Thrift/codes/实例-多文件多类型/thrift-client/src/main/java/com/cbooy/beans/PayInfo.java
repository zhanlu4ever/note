/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cbooy.beans;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-28")
public class PayInfo implements org.apache.thrift.TBase<PayInfo, PayInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PayInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PayInfo");

  private static final org.apache.thrift.protocol.TField PAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("payId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INFO_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("infoSet", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PayInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PayInfoTupleSchemeFactory());
  }

  public String payId; // required
  public Set<String> infoSet; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAY_ID((short)1, "payId"),
    INFO_SET((short)2, "infoSet");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAY_ID
          return PAY_ID;
        case 2: // INFO_SET
          return INFO_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAY_ID, new org.apache.thrift.meta_data.FieldMetaData("payId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INFO_SET, new org.apache.thrift.meta_data.FieldMetaData("infoSet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PayInfo.class, metaDataMap);
  }

  public PayInfo() {
  }

  public PayInfo(
    String payId,
    Set<String> infoSet)
  {
    this();
    this.payId = payId;
    this.infoSet = infoSet;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PayInfo(PayInfo other) {
    if (other.isSetPayId()) {
      this.payId = other.payId;
    }
    if (other.isSetInfoSet()) {
      Set<String> __this__infoSet = new HashSet<String>(other.infoSet);
      this.infoSet = __this__infoSet;
    }
  }

  public PayInfo deepCopy() {
    return new PayInfo(this);
  }

  public void clear() {
    this.payId = null;
    this.infoSet = null;
  }

  public String getPayId() {
    return this.payId;
  }

  public PayInfo setPayId(String payId) {
    this.payId = payId;
    return this;
  }

  public void unsetPayId() {
    this.payId = null;
  }

  /** Returns true if field payId is set (has been assigned a value) and false otherwise */
  public boolean isSetPayId() {
    return this.payId != null;
  }

  public void setPayIdIsSet(boolean value) {
    if (!value) {
      this.payId = null;
    }
  }

  public int getInfoSetSize() {
    return (this.infoSet == null) ? 0 : this.infoSet.size();
  }

  public java.util.Iterator<String> getInfoSetIterator() {
    return (this.infoSet == null) ? null : this.infoSet.iterator();
  }

  public void addToInfoSet(String elem) {
    if (this.infoSet == null) {
      this.infoSet = new HashSet<String>();
    }
    this.infoSet.add(elem);
  }

  public Set<String> getInfoSet() {
    return this.infoSet;
  }

  public PayInfo setInfoSet(Set<String> infoSet) {
    this.infoSet = infoSet;
    return this;
  }

  public void unsetInfoSet() {
    this.infoSet = null;
  }

  /** Returns true if field infoSet is set (has been assigned a value) and false otherwise */
  public boolean isSetInfoSet() {
    return this.infoSet != null;
  }

  public void setInfoSetIsSet(boolean value) {
    if (!value) {
      this.infoSet = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAY_ID:
      if (value == null) {
        unsetPayId();
      } else {
        setPayId((String)value);
      }
      break;

    case INFO_SET:
      if (value == null) {
        unsetInfoSet();
      } else {
        setInfoSet((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAY_ID:
      return getPayId();

    case INFO_SET:
      return getInfoSet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAY_ID:
      return isSetPayId();
    case INFO_SET:
      return isSetInfoSet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PayInfo)
      return this.equals((PayInfo)that);
    return false;
  }

  public boolean equals(PayInfo that) {
    if (that == null)
      return false;

    boolean this_present_payId = true && this.isSetPayId();
    boolean that_present_payId = true && that.isSetPayId();
    if (this_present_payId || that_present_payId) {
      if (!(this_present_payId && that_present_payId))
        return false;
      if (!this.payId.equals(that.payId))
        return false;
    }

    boolean this_present_infoSet = true && this.isSetInfoSet();
    boolean that_present_infoSet = true && that.isSetInfoSet();
    if (this_present_infoSet || that_present_infoSet) {
      if (!(this_present_infoSet && that_present_infoSet))
        return false;
      if (!this.infoSet.equals(that.infoSet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_payId = true && (isSetPayId());
    list.add(present_payId);
    if (present_payId)
      list.add(payId);

    boolean present_infoSet = true && (isSetInfoSet());
    list.add(present_infoSet);
    if (present_infoSet)
      list.add(infoSet);

    return list.hashCode();
  }

  public int compareTo(PayInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPayId()).compareTo(other.isSetPayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payId, other.payId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInfoSet()).compareTo(other.isSetInfoSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfoSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infoSet, other.infoSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PayInfo(");
    boolean first = true;

    sb.append("payId:");
    if (this.payId == null) {
      sb.append("null");
    } else {
      sb.append(this.payId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("infoSet:");
    if (this.infoSet == null) {
      sb.append("null");
    } else {
      sb.append(this.infoSet);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (payId == null) {
      throw new TProtocolException("Required field 'payId' was not present! Struct: " + toString());
    }
    if (infoSet == null) {
      throw new TProtocolException("Required field 'infoSet' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PayInfoStandardSchemeFactory implements SchemeFactory {
    public PayInfoStandardScheme getScheme() {
      return new PayInfoStandardScheme();
    }
  }

  private static class PayInfoStandardScheme extends StandardScheme<PayInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PayInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payId = iprot.readString();
              struct.setPayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INFO_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.infoSet = new HashSet<String>(2*_set0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.infoSet.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setInfoSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PayInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.payId != null) {
        oprot.writeFieldBegin(PAY_ID_FIELD_DESC);
        oprot.writeString(struct.payId);
        oprot.writeFieldEnd();
      }
      if (struct.infoSet != null) {
        oprot.writeFieldBegin(INFO_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.infoSet.size()));
          for (String _iter3 : struct.infoSet)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PayInfoTupleSchemeFactory implements SchemeFactory {
    public PayInfoTupleScheme getScheme() {
      return new PayInfoTupleScheme();
    }
  }

  private static class PayInfoTupleScheme extends TupleScheme<PayInfo> {

    public void write(org.apache.thrift.protocol.TProtocol prot, PayInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.payId);
      {
        oprot.writeI32(struct.infoSet.size());
        for (String _iter4 : struct.infoSet)
        {
          oprot.writeString(_iter4);
        }
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, PayInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.payId = iprot.readString();
      struct.setPayIdIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.infoSet = new HashSet<String>(2*_set5.size);
        String _elem6;
        for (int _i7 = 0; _i7 < _set5.size; ++_i7)
        {
          _elem6 = iprot.readString();
          struct.infoSet.add(_elem6);
        }
      }
      struct.setInfoSetIsSet(true);
    }
  }

}

